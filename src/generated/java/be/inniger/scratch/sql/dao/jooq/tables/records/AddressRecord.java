/*
 * This file is generated by jOOQ.
 */
package be.inniger.scratch.sql.dao.jooq.tables.records;


import be.inniger.scratch.sql.dao.jooq.tables.Address;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressRecord extends UpdatableRecordImpl<AddressRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 1352433498;

    /**
     * Setter for <code>address.id</code>.
     */
    public AddressRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>address.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>address.street</code>.
     */
    public AddressRecord setStreet(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>address.street</code>.
     */
    public String getStreet() {
        return (String) get(1);
    }

    /**
     * Setter for <code>address.person_id</code>.
     */
    public AddressRecord setPersonId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>address.person_id</code>.
     */
    public Integer getPersonId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Address.ADDRESS.ID;
    }

    @Override
    public Field<String> field2() {
        return Address.ADDRESS.STREET;
    }

    @Override
    public Field<Integer> field3() {
        return Address.ADDRESS.PERSON_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getStreet();
    }

    @Override
    public Integer component3() {
        return getPersonId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getStreet();
    }

    @Override
    public Integer value3() {
        return getPersonId();
    }

    @Override
    public AddressRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AddressRecord value2(String value) {
        setStreet(value);
        return this;
    }

    @Override
    public AddressRecord value3(Integer value) {
        setPersonId(value);
        return this;
    }

    @Override
    public AddressRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AddressRecord
     */
    public AddressRecord() {
        super(Address.ADDRESS);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(Integer id, String street, Integer personId) {
        super(Address.ADDRESS);

        set(0, id);
        set(1, street);
        set(2, personId);
    }
}
